# Generated by Django

from django.db import migrations
from datetime import timedelta


def migrate_existing_bookings(apps, schema_editor):
    """Migrate existing TeamBooking records to new scheduling system"""
    
    try:
        TeamBooking = apps.get_model('cflows', 'TeamBooking')
        SchedulableResource = apps.get_model('scheduling', 'SchedulableResource')
        BookingRequest = apps.get_model('scheduling', 'BookingRequest')
        
        # Process all existing team bookings
        team_bookings = TeamBooking.objects.all().select_related('team', 'booked_by', 'completed_by')
        migrated_count = 0
        
        for team_booking in team_bookings:
            # Create or get resource for the team
            resource, created = SchedulableResource.objects.get_or_create(
                organization=team_booking.team.organization,
                linked_team=team_booking.team,
                defaults={
                    'name': team_booking.team.name,
                    'resource_type': 'team',
                    'service_type': 'cflows',
                    'max_concurrent_bookings': getattr(team_booking.team, 'default_capacity', 1),
                    'default_booking_duration': timedelta(hours=2),
                    'availability_rules': {
                        'start_hour': 8,
                        'end_hour': 18,
                        'working_days': [0, 1, 2, 3, 4]  # Mon-Fri
                    }
                }
            )
            
            # Check if booking request already exists
            existing_booking = BookingRequest.objects.filter(
                source_service='cflows',
                source_object_type='team_booking',
                source_object_id=str(team_booking.id)
            ).first()
            
            if not existing_booking:
                # Create corresponding booking request
                status = 'completed' if team_booking.is_completed else 'confirmed'
                
                booking = BookingRequest.objects.create(
                    organization=team_booking.team.organization,
                    title=team_booking.title,
                    description=team_booking.description or '',
                    requested_start=team_booking.start_time,
                    requested_end=team_booking.end_time,
                    resource=resource,
                    required_capacity=team_booking.required_members,
                    status=status,
                    source_service='cflows',
                    source_object_type='team_booking',
                    source_object_id=str(team_booking.id),
                    requested_by=team_booking.booked_by,
                    completed_by=team_booking.completed_by,
                    completed_at=team_booking.completed_at,
                    custom_data={
                        'legacy_team_booking_id': team_booking.id,
                        'work_item_id': team_booking.work_item.id if hasattr(team_booking, 'work_item') and team_booking.work_item else None,
                        'workflow_step_id': team_booking.workflow_step.id if hasattr(team_booking, 'workflow_step') and team_booking.workflow_step else None,
                        'required_members': team_booking.required_members,
                    }
                )
                
                # Assign team members if available
                if hasattr(team_booking, 'assigned_members'):
                    try:
                        assigned_members = team_booking.assigned_members.all()
                        booking.assigned_to.set(assigned_members)
                    except:
                        pass  # Skip if there's an issue with assigned members
                
                migrated_count += 1
        
        print(f"Successfully migrated {migrated_count} team bookings to scheduling system")
        
    except Exception as e:
        print(f"Error during migration: {e}")
        # Don't fail the migration, just log the error


def reverse_migration(apps, schema_editor):
    """Reverse the migration by removing all migrated bookings"""
    try:
        BookingRequest = apps.get_model('scheduling', 'BookingRequest')
        BookingRequest.objects.filter(source_service='cflows', source_object_type='team_booking').delete()
    except:
        pass  # Ignore errors on reverse


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0003_remove_project_created_by_remove_project_manager_and_more'),
        ('cflows', '0012_alter_jobtype_unique_together_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_existing_bookings, reverse_migration),
    ]
