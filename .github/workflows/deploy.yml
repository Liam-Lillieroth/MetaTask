name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=sha

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to VPS over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            APP_DIR="${APP_DIR:-/home/metatask/apps/metatask}"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # Initialize/update repo in-place (safe for existing .env)
            [ -d .git ] || git init
            if git remote | grep -q '^origin$'; then
              git remote set-url origin https://github.com/${{ github.repository }}
            else
              git remote add origin https://github.com/${{ github.repository }}
            fi
            git fetch --depth 1 origin main
            git reset --hard FETCH_HEAD

            # Require .env (should be created once on server)
            if [ ! -f ".env" ]; then
              echo ".env missing in $APP_DIR. Create it from .env.example before deploying."
              exit 1
            fi

            # Compose detection
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif command-v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "Docker Compose not found on server. Install docker compose plugin or docker-compose."
              exit 1
            fi

            # GHCR login on the server (token needs read:packages)
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # Pull latest images and (re)start services
            $DC -f docker-compose.prod.yml pull
            $DC -f docker-compose.prod.yml up -d

            # Cleanup
            docker image prune -f