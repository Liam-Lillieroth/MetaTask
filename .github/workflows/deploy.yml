name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: metatask

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set owner lowercase
        id: owner
        run: |
          owner="${{ github.repository_owner }}"
          echo "lc_owner=${owner,,}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ steps.owner.outputs.lc_owner }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Build and push
        run: |
          IMAGE="ghcr.io/${{ steps.owner.outputs.lc_owner }}/${{ env.IMAGE_NAME }}"
          SHA_TAG="${GITHUB_SHA::12}"
          docker buildx build \
            --platform linux/amd64 \
            -t "$IMAGE:$SHA_TAG" \
            -t "$IMAGE:latest" \
            --push \
            .

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            export APP_DIR="${{ secrets.PROD_APP_DIR }}"
            export OWNER_LC="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
            export IMAGE="ghcr.io/${OWNER_LC}/${{ env.IMAGE_NAME }}"
            # Login to GHCR using a token with read:packages
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${OWNER_LC}" --password-stdin
            cd "$APP_DIR"
            # Ensure prod compose file exists locally
            test -f docker-compose.prod.yml
            # Pull latest image tags and roll out
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            docker image prune -f