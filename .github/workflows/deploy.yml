name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/metatask
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Upload deploy files
        if: ${{ hashFiles('deploy/**') != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "deploy/**"
          target: "/opt/metatask/"
          overwrite: true
          strip_components: 1  # <â€” flattens deploy/ into /opt/metatask

      - name: Deploy on VPS (no sudo)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            BASE_DIR=/opt/metatask
            ls -la "$BASE_DIR" || true

            # Ensure we can write to deployment dir (pre-provisioned)
            if ! [ -d "$BASE_DIR" ] || ! [ -w "$BASE_DIR" ]; then
              echo "ERROR: $BASE_DIR not writable by $USER. Run one-time server prep to create and chown it."
              exit 1
            fi

            # Ensure .env exists
            if [ ! -f "$BASE_DIR/.env" ] && [ -f "$BASE_DIR/.env.example" ]; then
              cp "$BASE_DIR/.env.example" "$BASE_DIR/.env"
              echo "Created $BASE_DIR/.env - please edit with real values."
            fi

            # Login to GHCR and deploy
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

            # Use explicit compose file to avoid cwd ambiguity
            docker compose -f "$BASE_DIR/docker-compose.yml" pull
            docker compose -f "$BASE_DIR/docker-compose.yml" up -d

            docker image prune -f