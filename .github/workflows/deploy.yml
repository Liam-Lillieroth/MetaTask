name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Build & push image to GHCR using GITHUB_TOKEN (packages: write is granted above)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=sha

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Deploy to server using your PROD_* secrets
      - name: Deploy to VPS over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            sudo mkdir -p /opt/metatask
            sudo chown -R $USER:$USER /opt/metatask
            cd /opt/metatask

            if [ ! -d ".git" ]; then
              git clone --depth 1 https://github.com/${{ github.repository }} ./
            else
              git fetch --all
              git checkout main
              git pull
            fi

            if [ ! -f ".env" ]; then
              echo ".env missing in /opt/metatask. Create it from .env.example before deploying."
              exit 1
            fi

            # Log in to GHCR on the server to pull images
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d

            docker image prune -f